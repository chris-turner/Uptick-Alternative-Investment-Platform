@page "/Portfolio"
@inject AppState AppState
@inject NavigationManager NavManager


@if (AppState.loggedInUser == null)
{

}
else
{
	<h3>@AppState.loggedInUser.username's Portfolio</h3>
	if (AppState.portfolio == null || AppState.portfolio.Count == 0)
	{

		<p>Your portfolio is empty. Join breaks to acquire assets.</p>
	}
	else
	{
		<div class="row" style="height:400px; max-height:400px">
			<div class="col-9">
				<ChartJs.Blazor.Chart Config="_config"></ChartJs.Blazor.Chart>
			</div>
		</div>
		<div class="row pad-top">
		@foreach (var asset in AppState.portfolio)
		{
			var assetID = asset.cardId;
			<div class="col-md-4 col-sm-6 col-xs-6">

				@if (asset.isVideo)
				{
					<video style="display: block; width:30% " class="grid-img" src="@asset.CardImageURL" loop="" autoplay="" playsinline="" preload="auto" controls="" muted=""></video>
				}
				else
				{
					<p> <img class="grid-img" src="@asset.CardImageURL" /></p>
				}

				<p>
					@asset.Player @asset.CardName
					@if (asset.Grader != "" && asset.Grade != 0)
					{
						@asset.Grader @asset.Grade
					}
				</p>
				<p><button type="button" class="btn btn-primary" @onclick="(() => sendAssetToWithdrawl(assetID))">Withdraw Asset</button></p>
			</div>
		}
		</div>
	}
}

@code {
	@using System.Globalization
	@using ChartJs.Blazor.PieChart
	@using System.Drawing
	@using ChartJs.Blazor.Util
	@using ChartJs.Blazor.Common
	@using ChartJs.Blazor.Common.Axes
	@using ChartJs.Blazor.Common.Axes.Ticks
	@using ChartJs.Blazor.Common.Enums
	@using ChartJs.Blazor.Common.Handlers
	@using ChartJs.Blazor.Common.Time
	@using ChartJs.Blazor.Interop
	List<int> assetClasses;
	private PieConfig _config;


	protected override void OnInitialized()
	{
		if (AppState.loggedInUser == null)
		{
			NavManager.NavigateTo($"/account");
		}
		else if (AppState.portfolio != null && AppState.portfolio.Count > 0)
		{
			buildPieChart();
		}
	}

	protected void buildPieChart()
	{
		_config = new PieConfig
			{
				Options = new PieOptions
				{
					Responsive = true,
					Title = new OptionsTitle
					{
						Display = true,
						Text = "Portfolio by Asset Classes"
					},
					MaintainAspectRatio = false,
					AspectRatio = 3,
				}
			};


		Dictionary<string, int> assetClassCount = new Dictionary<string, int>();
		foreach (var asset in AppState.portfolio)
		{
			if (assetClassCount.ContainsKey(asset.AssetClass))
			{
				assetClassCount[asset.AssetClass] = assetClassCount[asset.AssetClass] + 1;
			}
			else
			{
				assetClassCount.Add(asset.AssetClass, 1);
			}
		}
		assetClasses = new List<int>();
		foreach (var kvp in assetClassCount)
		{
			_config.Data.Labels.Add(kvp.Key);
			assetClasses.Add(kvp.Value);
		}

		PieDataset<int> dataset = new PieDataset<int>(assetClasses)
			{
				BackgroundColor = new[]
						{
			ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
				}
			};

		_config.Data.Datasets.Add(dataset);
	}

	public void sendAssetToWithdrawl(string assetID)
	{
		if (AppState.withdraw == null)
		{
			AppState.withdraw = new List<Asset>();
		}
		var asset = AppState.portfolio.Where(a => a.cardId == assetID).FirstOrDefault();
		AppState.portfolio.Remove(asset);
		AppState.withdraw.Add(asset);
	}


	}
