@page "/send"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager


<div class="row pad-bottom">
	<div class="col-1"></div>
	<div class="col-10">
		<h3>Send or Withdraw Assets</h3>
	</div>
	<div class="col-1"></div>
</div>

<div class="row pad-bottom">
	<div class="col-1"></div>
	<div class="col-10">
		@if (loggedInUser != null)
		{
			if (loggedInUser.withdraw == null)
			{
				<p>No assets marked to withdraw.</p>
			}
			else
			{
				foreach (var asset in loggedInUser.withdraw)
				{
					var assetID = asset.cardId;
					<div class="col-md-4 col-sm-6 col-xs-6">
						@if (asset.isVideo)
						{
							<video style="display: block; width:30% " class="grid-img" src="@asset.CardImageURL" loop="" autoplay="" playsinline="" preload="auto" controls="" muted=""></video>
						}
						else
						{
							<p> <img class="grid-img" src="@asset.CardImageURL" /></p>
						}
						@if (!String.IsNullOrEmpty(asset.Grader) && asset.Grade != 0)
						{
							cardName = $"{asset.Player} {asset.CardName} {asset.Grader} {asset.Grade}";
						}
						else
						{
							cardName = $"{asset.Player} {asset.CardName}";
						}
						@cardName
						<p><button type="button" class="btn btn-primary" @onclick="(() => sendAssetToPortfolio(assetID))">Send to Portfolio</button></p>
						<p><button type="button" class="btn btn-primary">Withdraw Asset</button></p>
					</div>
				}
			}
		}
	</div>
	<div class="col-1"></div>
</div>
@code {

	User loggedInUser;
	string cardName;

	protected override async Task OnInitializedAsync()
	{
		loggedInUser = await localStorage.GetItemAsync<User>("loggedInUser");
		if (loggedInUser == null)
		{
			NavManager.NavigateTo($"/account");
		}
	}
	public async Task sendAssetToPortfolio(string assetID)
	{
		if (loggedInUser.portfolio == null)
		{
			loggedInUser.portfolio = new List<Asset>();
		}
		var asset = loggedInUser.withdraw.Where(a => a.cardId == assetID).FirstOrDefault();
		loggedInUser.withdraw.Remove(asset);
		loggedInUser.portfolio.Add(asset);
		await localStorage.SetItemAsync("loggedInUser", loggedInUser);
	}
}
